//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestServices.AdminServiceClient {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Bus", Namespace="http://schemas.datacontract.org/2004/07/BusStationService.Lib")]
    [System.SerializableAttribute()]
    public partial class Bus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CapacityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestServices.AdminServiceClient.Trip[] TripsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Capacity {
            get {
                return this.CapacityField;
            }
            set {
                if ((this.CapacityField.Equals(value) != true)) {
                    this.CapacityField = value;
                    this.RaisePropertyChanged("Capacity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RegNumber {
            get {
                return this.RegNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.RegNumberField, value) != true)) {
                    this.RegNumberField = value;
                    this.RaisePropertyChanged("RegNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestServices.AdminServiceClient.Trip[] Trips {
            get {
                return this.TripsField;
            }
            set {
                if ((object.ReferenceEquals(this.TripsField, value) != true)) {
                    this.TripsField = value;
                    this.RaisePropertyChanged("Trips");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Trip", Namespace="http://schemas.datacontract.org/2004/07/BusStationService.Lib")]
    [System.SerializableAttribute()]
    public partial class Trip : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestServices.AdminServiceClient.Bus BusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> BusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DepartureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestServices.AdminServiceClient.Direction DirectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> DirectionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FillingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestServices.AdminServiceClient.Order[] OrdersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestServices.AdminServiceClient.Bus Bus {
            get {
                return this.BusField;
            }
            set {
                if ((object.ReferenceEquals(this.BusField, value) != true)) {
                    this.BusField = value;
                    this.RaisePropertyChanged("Bus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> BusId {
            get {
                return this.BusIdField;
            }
            set {
                if ((this.BusIdField.Equals(value) != true)) {
                    this.BusIdField = value;
                    this.RaisePropertyChanged("BusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Departure {
            get {
                return this.DepartureField;
            }
            set {
                if ((this.DepartureField.Equals(value) != true)) {
                    this.DepartureField = value;
                    this.RaisePropertyChanged("Departure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestServices.AdminServiceClient.Direction Direction {
            get {
                return this.DirectionField;
            }
            set {
                if ((object.ReferenceEquals(this.DirectionField, value) != true)) {
                    this.DirectionField = value;
                    this.RaisePropertyChanged("Direction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> DirectionId {
            get {
                return this.DirectionIdField;
            }
            set {
                if ((this.DirectionIdField.Equals(value) != true)) {
                    this.DirectionIdField = value;
                    this.RaisePropertyChanged("DirectionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Filling {
            get {
                return this.FillingField;
            }
            set {
                if ((this.FillingField.Equals(value) != true)) {
                    this.FillingField = value;
                    this.RaisePropertyChanged("Filling");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestServices.AdminServiceClient.Order[] Orders {
            get {
                return this.OrdersField;
            }
            set {
                if ((object.ReferenceEquals(this.OrdersField, value) != true)) {
                    this.OrdersField = value;
                    this.RaisePropertyChanged("Orders");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Direction", Namespace="http://schemas.datacontract.org/2004/07/BusStationService.Lib")]
    [System.SerializableAttribute()]
    public partial class Direction : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CoordinatesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DistanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestServices.AdminServiceClient.Trip[] TripsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Coordinates {
            get {
                return this.CoordinatesField;
            }
            set {
                if ((object.ReferenceEquals(this.CoordinatesField, value) != true)) {
                    this.CoordinatesField = value;
                    this.RaisePropertyChanged("Coordinates");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Distance {
            get {
                return this.DistanceField;
            }
            set {
                if ((this.DistanceField.Equals(value) != true)) {
                    this.DistanceField = value;
                    this.RaisePropertyChanged("Distance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestServices.AdminServiceClient.Trip[] Trips {
            get {
                return this.TripsField;
            }
            set {
                if ((object.ReferenceEquals(this.TripsField, value) != true)) {
                    this.TripsField = value;
                    this.RaisePropertyChanged("Trips");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Order", Namespace="http://schemas.datacontract.org/2004/07/BusStationService.Lib")]
    [System.SerializableAttribute()]
    public partial class Order : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestServices.AdminServiceClient.Customer CustomerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CustomerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlaceNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestServices.AdminServiceClient.Trip TripField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TripIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestServices.AdminServiceClient.Customer Customer {
            get {
                return this.CustomerField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerField, value) != true)) {
                    this.CustomerField = value;
                    this.RaisePropertyChanged("Customer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CustomerId {
            get {
                return this.CustomerIdField;
            }
            set {
                if ((this.CustomerIdField.Equals(value) != true)) {
                    this.CustomerIdField = value;
                    this.RaisePropertyChanged("CustomerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlaceNumber {
            get {
                return this.PlaceNumberField;
            }
            set {
                if ((this.PlaceNumberField.Equals(value) != true)) {
                    this.PlaceNumberField = value;
                    this.RaisePropertyChanged("PlaceNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestServices.AdminServiceClient.Trip Trip {
            get {
                return this.TripField;
            }
            set {
                if ((object.ReferenceEquals(this.TripField, value) != true)) {
                    this.TripField = value;
                    this.RaisePropertyChanged("Trip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TripId {
            get {
                return this.TripIdField;
            }
            set {
                if ((this.TripIdField.Equals(value) != true)) {
                    this.TripIdField = value;
                    this.RaisePropertyChanged("TripId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Customer", Namespace="http://schemas.datacontract.org/2004/07/BusStationService.Lib")]
    [System.SerializableAttribute()]
    public partial class Customer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TestServices.AdminServiceClient.Order[] OrdersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TestServices.AdminServiceClient.Order[] Orders {
            get {
                return this.OrdersField;
            }
            set {
                if ((object.ReferenceEquals(this.OrdersField, value) != true)) {
                    this.OrdersField = value;
                    this.RaisePropertyChanged("Orders");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AdminServiceClient.IAdminService")]
    public interface IAdminService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddBus", ReplyAction="http://tempuri.org/IAdminService/AddBusResponse")]
        void AddBus(TestServices.AdminServiceClient.Bus bus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddBus", ReplyAction="http://tempuri.org/IAdminService/AddBusResponse")]
        System.Threading.Tasks.Task AddBusAsync(TestServices.AdminServiceClient.Bus bus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetBusById", ReplyAction="http://tempuri.org/IAdminService/GetBusByIdResponse")]
        TestServices.AdminServiceClient.Bus GetBusById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetBusById", ReplyAction="http://tempuri.org/IAdminService/GetBusByIdResponse")]
        System.Threading.Tasks.Task<TestServices.AdminServiceClient.Bus> GetBusByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SaveBus", ReplyAction="http://tempuri.org/IAdminService/SaveBusResponse")]
        void SaveBus(TestServices.AdminServiceClient.Bus bus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SaveBus", ReplyAction="http://tempuri.org/IAdminService/SaveBusResponse")]
        System.Threading.Tasks.Task SaveBusAsync(TestServices.AdminServiceClient.Bus bus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAllBusses", ReplyAction="http://tempuri.org/IAdminService/GetAllBussesResponse")]
        TestServices.AdminServiceClient.Bus[] GetAllBusses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAllBusses", ReplyAction="http://tempuri.org/IAdminService/GetAllBussesResponse")]
        System.Threading.Tasks.Task<TestServices.AdminServiceClient.Bus[]> GetAllBussesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteBus", ReplyAction="http://tempuri.org/IAdminService/DeleteBusResponse")]
        void DeleteBus(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteBus", ReplyAction="http://tempuri.org/IAdminService/DeleteBusResponse")]
        System.Threading.Tasks.Task DeleteBusAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAllDirections", ReplyAction="http://tempuri.org/IAdminService/GetAllDirectionsResponse")]
        TestServices.AdminServiceClient.Direction[] GetAllDirections();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAllDirections", ReplyAction="http://tempuri.org/IAdminService/GetAllDirectionsResponse")]
        System.Threading.Tasks.Task<TestServices.AdminServiceClient.Direction[]> GetAllDirectionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SaveDirections", ReplyAction="http://tempuri.org/IAdminService/SaveDirectionsResponse")]
        void SaveDirections(TestServices.AdminServiceClient.Direction[] directions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SaveDirections", ReplyAction="http://tempuri.org/IAdminService/SaveDirectionsResponse")]
        System.Threading.Tasks.Task SaveDirectionsAsync(TestServices.AdminServiceClient.Direction[] directions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAllCustomers", ReplyAction="http://tempuri.org/IAdminService/GetAllCustomersResponse")]
        TestServices.AdminServiceClient.Customer[] GetAllCustomers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAllCustomers", ReplyAction="http://tempuri.org/IAdminService/GetAllCustomersResponse")]
        System.Threading.Tasks.Task<TestServices.AdminServiceClient.Customer[]> GetAllCustomersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetCustomerById", ReplyAction="http://tempuri.org/IAdminService/GetCustomerByIdResponse")]
        TestServices.AdminServiceClient.Customer GetCustomerById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetCustomerById", ReplyAction="http://tempuri.org/IAdminService/GetCustomerByIdResponse")]
        System.Threading.Tasks.Task<TestServices.AdminServiceClient.Customer> GetCustomerByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddCustomer", ReplyAction="http://tempuri.org/IAdminService/AddCustomerResponse")]
        void AddCustomer(TestServices.AdminServiceClient.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddCustomer", ReplyAction="http://tempuri.org/IAdminService/AddCustomerResponse")]
        System.Threading.Tasks.Task AddCustomerAsync(TestServices.AdminServiceClient.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SaveCustomer", ReplyAction="http://tempuri.org/IAdminService/SaveCustomerResponse")]
        void SaveCustomer(TestServices.AdminServiceClient.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SaveCustomer", ReplyAction="http://tempuri.org/IAdminService/SaveCustomerResponse")]
        System.Threading.Tasks.Task SaveCustomerAsync(TestServices.AdminServiceClient.Customer customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteCustomer", ReplyAction="http://tempuri.org/IAdminService/DeleteCustomerResponse")]
        void DeleteCustomer(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteCustomer", ReplyAction="http://tempuri.org/IAdminService/DeleteCustomerResponse")]
        System.Threading.Tasks.Task DeleteCustomerAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAllOrders", ReplyAction="http://tempuri.org/IAdminService/GetAllOrdersResponse")]
        TestServices.AdminServiceClient.Order[] GetAllOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAllOrders", ReplyAction="http://tempuri.org/IAdminService/GetAllOrdersResponse")]
        System.Threading.Tasks.Task<TestServices.AdminServiceClient.Order[]> GetAllOrdersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetOrderById", ReplyAction="http://tempuri.org/IAdminService/GetOrderByIdResponse")]
        TestServices.AdminServiceClient.Order GetOrderById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetOrderById", ReplyAction="http://tempuri.org/IAdminService/GetOrderByIdResponse")]
        System.Threading.Tasks.Task<TestServices.AdminServiceClient.Order> GetOrderByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddOrder", ReplyAction="http://tempuri.org/IAdminService/AddOrderResponse")]
        void AddOrder(TestServices.AdminServiceClient.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddOrder", ReplyAction="http://tempuri.org/IAdminService/AddOrderResponse")]
        System.Threading.Tasks.Task AddOrderAsync(TestServices.AdminServiceClient.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SaveOrder", ReplyAction="http://tempuri.org/IAdminService/SaveOrderResponse")]
        void SaveOrder(TestServices.AdminServiceClient.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SaveOrder", ReplyAction="http://tempuri.org/IAdminService/SaveOrderResponse")]
        System.Threading.Tasks.Task SaveOrderAsync(TestServices.AdminServiceClient.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteOrder", ReplyAction="http://tempuri.org/IAdminService/DeleteOrderResponse")]
        void DeleteOrder(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteOrder", ReplyAction="http://tempuri.org/IAdminService/DeleteOrderResponse")]
        System.Threading.Tasks.Task DeleteOrderAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAllTrips", ReplyAction="http://tempuri.org/IAdminService/GetAllTripsResponse")]
        string GetAllTrips();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAllTrips", ReplyAction="http://tempuri.org/IAdminService/GetAllTripsResponse")]
        System.Threading.Tasks.Task<string> GetAllTripsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetTripsByDate", ReplyAction="http://tempuri.org/IAdminService/GetTripsByDateResponse")]
        TestServices.AdminServiceClient.Trip[] GetTripsByDate(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetTripsByDate", ReplyAction="http://tempuri.org/IAdminService/GetTripsByDateResponse")]
        System.Threading.Tasks.Task<TestServices.AdminServiceClient.Trip[]> GetTripsByDateAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteTrip", ReplyAction="http://tempuri.org/IAdminService/DeleteTripResponse")]
        void DeleteTrip(int tripId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteTrip", ReplyAction="http://tempuri.org/IAdminService/DeleteTripResponse")]
        System.Threading.Tasks.Task DeleteTripAsync(int tripId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddTrip", ReplyAction="http://tempuri.org/IAdminService/AddTripResponse")]
        void AddTrip(TestServices.AdminServiceClient.Trip trip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddTrip", ReplyAction="http://tempuri.org/IAdminService/AddTripResponse")]
        System.Threading.Tasks.Task AddTripAsync(TestServices.AdminServiceClient.Trip trip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetTripById", ReplyAction="http://tempuri.org/IAdminService/GetTripByIdResponse")]
        TestServices.AdminServiceClient.Trip GetTripById(int tripId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetTripById", ReplyAction="http://tempuri.org/IAdminService/GetTripByIdResponse")]
        System.Threading.Tasks.Task<TestServices.AdminServiceClient.Trip> GetTripByIdAsync(int tripId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SaveTrip", ReplyAction="http://tempuri.org/IAdminService/SaveTripResponse")]
        void SaveTrip(TestServices.AdminServiceClient.Trip trip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/SaveTrip", ReplyAction="http://tempuri.org/IAdminService/SaveTripResponse")]
        System.Threading.Tasks.Task SaveTripAsync(TestServices.AdminServiceClient.Trip trip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAvailableDirections", ReplyAction="http://tempuri.org/IAdminService/GetAvailableDirectionsResponse")]
        TestServices.AdminServiceClient.Direction[] GetAvailableDirections();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAvailableDirections", ReplyAction="http://tempuri.org/IAdminService/GetAvailableDirectionsResponse")]
        System.Threading.Tasks.Task<TestServices.AdminServiceClient.Direction[]> GetAvailableDirectionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAvailableBuses", ReplyAction="http://tempuri.org/IAdminService/GetAvailableBusesResponse")]
        TestServices.AdminServiceClient.Bus[] GetAvailableBuses(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAvailableBuses", ReplyAction="http://tempuri.org/IAdminService/GetAvailableBusesResponse")]
        System.Threading.Tasks.Task<TestServices.AdminServiceClient.Bus[]> GetAvailableBusesAsync(System.DateTime date);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdminServiceChannel : TestServices.AdminServiceClient.IAdminService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdminServiceClient : System.ServiceModel.ClientBase<TestServices.AdminServiceClient.IAdminService>, TestServices.AdminServiceClient.IAdminService {
        
        public AdminServiceClient() {
        }
        
        public AdminServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AdminServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddBus(TestServices.AdminServiceClient.Bus bus) {
            base.Channel.AddBus(bus);
        }
        
        public System.Threading.Tasks.Task AddBusAsync(TestServices.AdminServiceClient.Bus bus) {
            return base.Channel.AddBusAsync(bus);
        }
        
        public TestServices.AdminServiceClient.Bus GetBusById(int id) {
            return base.Channel.GetBusById(id);
        }
        
        public System.Threading.Tasks.Task<TestServices.AdminServiceClient.Bus> GetBusByIdAsync(int id) {
            return base.Channel.GetBusByIdAsync(id);
        }
        
        public void SaveBus(TestServices.AdminServiceClient.Bus bus) {
            base.Channel.SaveBus(bus);
        }
        
        public System.Threading.Tasks.Task SaveBusAsync(TestServices.AdminServiceClient.Bus bus) {
            return base.Channel.SaveBusAsync(bus);
        }
        
        public TestServices.AdminServiceClient.Bus[] GetAllBusses() {
            return base.Channel.GetAllBusses();
        }
        
        public System.Threading.Tasks.Task<TestServices.AdminServiceClient.Bus[]> GetAllBussesAsync() {
            return base.Channel.GetAllBussesAsync();
        }
        
        public void DeleteBus(int id) {
            base.Channel.DeleteBus(id);
        }
        
        public System.Threading.Tasks.Task DeleteBusAsync(int id) {
            return base.Channel.DeleteBusAsync(id);
        }
        
        public TestServices.AdminServiceClient.Direction[] GetAllDirections() {
            return base.Channel.GetAllDirections();
        }
        
        public System.Threading.Tasks.Task<TestServices.AdminServiceClient.Direction[]> GetAllDirectionsAsync() {
            return base.Channel.GetAllDirectionsAsync();
        }
        
        public void SaveDirections(TestServices.AdminServiceClient.Direction[] directions) {
            base.Channel.SaveDirections(directions);
        }
        
        public System.Threading.Tasks.Task SaveDirectionsAsync(TestServices.AdminServiceClient.Direction[] directions) {
            return base.Channel.SaveDirectionsAsync(directions);
        }
        
        public TestServices.AdminServiceClient.Customer[] GetAllCustomers() {
            return base.Channel.GetAllCustomers();
        }
        
        public System.Threading.Tasks.Task<TestServices.AdminServiceClient.Customer[]> GetAllCustomersAsync() {
            return base.Channel.GetAllCustomersAsync();
        }
        
        public TestServices.AdminServiceClient.Customer GetCustomerById(int id) {
            return base.Channel.GetCustomerById(id);
        }
        
        public System.Threading.Tasks.Task<TestServices.AdminServiceClient.Customer> GetCustomerByIdAsync(int id) {
            return base.Channel.GetCustomerByIdAsync(id);
        }
        
        public void AddCustomer(TestServices.AdminServiceClient.Customer customer) {
            base.Channel.AddCustomer(customer);
        }
        
        public System.Threading.Tasks.Task AddCustomerAsync(TestServices.AdminServiceClient.Customer customer) {
            return base.Channel.AddCustomerAsync(customer);
        }
        
        public void SaveCustomer(TestServices.AdminServiceClient.Customer customer) {
            base.Channel.SaveCustomer(customer);
        }
        
        public System.Threading.Tasks.Task SaveCustomerAsync(TestServices.AdminServiceClient.Customer customer) {
            return base.Channel.SaveCustomerAsync(customer);
        }
        
        public void DeleteCustomer(int id) {
            base.Channel.DeleteCustomer(id);
        }
        
        public System.Threading.Tasks.Task DeleteCustomerAsync(int id) {
            return base.Channel.DeleteCustomerAsync(id);
        }
        
        public TestServices.AdminServiceClient.Order[] GetAllOrders() {
            return base.Channel.GetAllOrders();
        }
        
        public System.Threading.Tasks.Task<TestServices.AdminServiceClient.Order[]> GetAllOrdersAsync() {
            return base.Channel.GetAllOrdersAsync();
        }
        
        public TestServices.AdminServiceClient.Order GetOrderById(int id) {
            return base.Channel.GetOrderById(id);
        }
        
        public System.Threading.Tasks.Task<TestServices.AdminServiceClient.Order> GetOrderByIdAsync(int id) {
            return base.Channel.GetOrderByIdAsync(id);
        }
        
        public void AddOrder(TestServices.AdminServiceClient.Order order) {
            base.Channel.AddOrder(order);
        }
        
        public System.Threading.Tasks.Task AddOrderAsync(TestServices.AdminServiceClient.Order order) {
            return base.Channel.AddOrderAsync(order);
        }
        
        public void SaveOrder(TestServices.AdminServiceClient.Order order) {
            base.Channel.SaveOrder(order);
        }
        
        public System.Threading.Tasks.Task SaveOrderAsync(TestServices.AdminServiceClient.Order order) {
            return base.Channel.SaveOrderAsync(order);
        }
        
        public void DeleteOrder(int id) {
            base.Channel.DeleteOrder(id);
        }
        
        public System.Threading.Tasks.Task DeleteOrderAsync(int id) {
            return base.Channel.DeleteOrderAsync(id);
        }
        
        public string GetAllTrips() {
            return base.Channel.GetAllTrips();
        }
        
        public System.Threading.Tasks.Task<string> GetAllTripsAsync() {
            return base.Channel.GetAllTripsAsync();
        }
        
        public TestServices.AdminServiceClient.Trip[] GetTripsByDate(System.DateTime date) {
            return base.Channel.GetTripsByDate(date);
        }
        
        public System.Threading.Tasks.Task<TestServices.AdminServiceClient.Trip[]> GetTripsByDateAsync(System.DateTime date) {
            return base.Channel.GetTripsByDateAsync(date);
        }
        
        public void DeleteTrip(int tripId) {
            base.Channel.DeleteTrip(tripId);
        }
        
        public System.Threading.Tasks.Task DeleteTripAsync(int tripId) {
            return base.Channel.DeleteTripAsync(tripId);
        }
        
        public void AddTrip(TestServices.AdminServiceClient.Trip trip) {
            base.Channel.AddTrip(trip);
        }
        
        public System.Threading.Tasks.Task AddTripAsync(TestServices.AdminServiceClient.Trip trip) {
            return base.Channel.AddTripAsync(trip);
        }
        
        public TestServices.AdminServiceClient.Trip GetTripById(int tripId) {
            return base.Channel.GetTripById(tripId);
        }
        
        public System.Threading.Tasks.Task<TestServices.AdminServiceClient.Trip> GetTripByIdAsync(int tripId) {
            return base.Channel.GetTripByIdAsync(tripId);
        }
        
        public void SaveTrip(TestServices.AdminServiceClient.Trip trip) {
            base.Channel.SaveTrip(trip);
        }
        
        public System.Threading.Tasks.Task SaveTripAsync(TestServices.AdminServiceClient.Trip trip) {
            return base.Channel.SaveTripAsync(trip);
        }
        
        public TestServices.AdminServiceClient.Direction[] GetAvailableDirections() {
            return base.Channel.GetAvailableDirections();
        }
        
        public System.Threading.Tasks.Task<TestServices.AdminServiceClient.Direction[]> GetAvailableDirectionsAsync() {
            return base.Channel.GetAvailableDirectionsAsync();
        }
        
        public TestServices.AdminServiceClient.Bus[] GetAvailableBuses(System.DateTime date) {
            return base.Channel.GetAvailableBuses(date);
        }
        
        public System.Threading.Tasks.Task<TestServices.AdminServiceClient.Bus[]> GetAvailableBusesAsync(System.DateTime date) {
            return base.Channel.GetAvailableBusesAsync(date);
        }
    }
}
